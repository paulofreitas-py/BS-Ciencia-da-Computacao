//Barbeiro dorminoco - C

#include "stdio.h"
#include "unistd.h"
#include "stdlib.h"
#include "pthread.h"
#include "semaphore.h"

#define CHAIRS 5                /* número de cadeiras para os clientes à espera */
#define TRUE 1

sem_t customers;                /* número de cliente à espera de atendimento */
sem_t barbers;                  /* número de barbeiros à espera de clientes */
sem_t mutex;                    /* para exclusão mútua */
int waiting = 0;                /* clientes que estão esperando (não estão cortando) */

/* protótipos */
void* barber(void *arg);
void* customer(void *arg);
void cut_hair();
void customer_arrived();
void get_haircut();
void giveup_haircut();

int main() {
sem_init(&customers, TRUE, 0);
sem_init(&barbers, TRUE, 0);
sem_init(&mutex, TRUE, 1);

pthread_t b, c;

 /* criando único barbeiro */
 pthread_create(&b, NULL, (void *) barber, NULL);


 /* criação indefinida de clientes */
 while(TRUE) {
pthread_create(&c, NULL, (void *) customer, NULL);
sleep(1);
}

return 0;
}

void* barber(void *arg) {
while(TRUE) {
sem_wait(&customers);   /* vai dormir se o número de clientes for 0 */
sem_wait(&mutex);       /* obtém acesso a 'waiting' */
waiting = waiting - 1;  /*descresce de um o contador de clientes à espera */
sem_post(&barbers);     /* um barbeiro está agora pronto para cortar cabelo */
sem_post(&mutex);       /* libera 'waiting' */
cut_hair();             /* corta o cabelo (fora da região crítica) */
}

pthread_exit(NULL);
}

void* customer(void *arg) {
sem_wait(&mutex);           /* entra na região crítica */

if(waiting < CHAIRS) {      /* se não houver cadeiras vazias, saia */
customer_arrived();
waiting = waiting + 1;  /* incrementa o contador de clientes à espera */
sem_post(&customers);   /* acorda o barbeiro se necessário */
sem_post(&mutex);       /* libera o acesso a 'waiting' */
sem_wait(&barbers);     /* vai dormir se o número de barbeiros livres for 0 */
get_haircut();          /* sentado e sendo servido */
} else {
sem_post(&mutex);       /* a barbearia está cheia; não espera */
giveup_haircut();

}

pthread_exit(NULL);
}

void cut_hair() {
printf("Barbeiro estah cortando o cabelo de alguem tempo estimado par atermino do corte 45 minutos!\n");
sleep(5);
}

void customer_arrived() {
printf("Cliente chegou para cortar cabelo!\n");
}
void get_haircut() {
printf("Cliente estah tendo o cabelo cortado!\n");
}

void giveup_haircut() {
printf("Cliente desistiu! (O salao estah muito cheio retorne em cerca de 45 minutos!)\n");
}

------------------------------------------------------------------------------------------------------------------------------

A thread está representando o barbeiro e os cliente, a lógica na qual foi baseada o código consiste basicamente
em o barbeiro sempre que não estiver cortando o cabelo estará dormindo o primeiro cliente que chegar acordará o 
barbeiro e os demais clientes que chegarem devem sentar nas cadeiras (caso ainda haja alguma disponível) 
os clientes que chegarem e a barbearia estiver cheia vão embora e voltam após o tempo estipulado para o corte de cabelo
do cliente da vez.

Barbearia vazia o barbeiro está dormindo;
Primeiro cliente chegou acorda o barbeiro;
Inicia-se o corte tempo estipulado 45 minutos;
Chegou um novo cliente deve sentar-se (se houver cadeiras disponíveis); 
Chegou um novo cliente salão cheio desistiu (retornará depois dos 45 minutos do corte do outro cliente);






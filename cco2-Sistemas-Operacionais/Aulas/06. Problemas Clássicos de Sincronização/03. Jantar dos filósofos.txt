#jantar dos filosofos - Python
import _thread
import time, random
import threading

    
garfo = list()
for i in range(5):
  garfo.append(threading.Semaphore(1))
    
def filosofo(f):
  f = int(f)
  while True:
# garfo da esquerda
    garfo[f].acquire()
# garfo da direita
    garfo[(f + 1) % 5].acquire()
    print ("Filósofo ",f," comendo..." )
    time.sleep(random.randint(1, 5))
    garfo[f].release()
    garfo[(f + 1) % 5].release()
    print ("Filósofo ",f," pensando...")
    time.sleep(random.randint(1, 10))
 
for i in range(5):
  print ("Filósofo", i)
  _thread.start_new_thread(filosofo, tuple([i]))
 
while 1: pass

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Jantar dos filósofos 
Cada filosofo representa um thread, para controlar a área crítica utiliza o mecanismo de semáforo, enquanto um filosofo 
come os da direita e da esquerda eles aguardam a liberação do garfo para que não aja uma disputa evitando um deadlock, 
o tempo que ele come é definido de maneira aleatória, o “start” é feito de maneira aleatória para que os filósofos mais 
famintos não morram de fome, sempre dois filósofos ,começam a comer enquanto os demais esperam, nunca é um do lado do 
outro, pois eles aguardam.